1) Install a modern Python in WSL (pick one of these)

Option A — if Ubuntu offers 3.12 (recommended):

sudo apt update
sudo apt install -y python3.12 python3.12-venv python3.12-dev


Option B — if you need the deadsnakes PPA (for 3.10/3.11):

sudo apt update
sudo apt install -y software-properties-common
sudo add-apt-repository -y ppa:deadsnakes/ppa
sudo apt update
sudo apt install -y python3.10 python3.10-venv python3.10-dev

2) Remove the old venv and create a new one

From your repo root:

deactivate 2>/dev/null || true
rm -rf .venv

# choose the version you installed (3.12 shown here)
python3.12 -m venv .venv
source .venv/bin/activate

python --version   # should show 3.10+ (e.g., 3.12.x)
pip install --upgrade pip setuptools wheel

3) Install deps
pip install -r requirements.txt


If you’re using MySQL and it’s not in requirements, also:

pip install pymysql

4) Set your DB URL and run Alembic
export SQLALCHEMY_DATABASE_URI='mysql+pymysql://USER:PASSWORD@HOST:3306/DBNAME'
echo $SQLALCHEMY_DATABASE_URI  # quick sanity check

python -m alembic upgrade head


You should now see Alembic applying your migration (creating log_metadata_header and log_metadata_attr).

If you absolutely cannot upgrade Python (temporary workaround)

I don’t recommend this for the enterprise repo, but for completeness:

Remove/comment from __future__ import annotations everywhere Alembic imports (e.g., db/models.py, maybe others), or

Run migrations from a separate helper script that imports models lazily without that future import.

Again, better to upgrade Python.

Quick verification checklist

python --version prints 3.10+

pip show alembic shows installed

echo $SQLALCHEMY_DATABASE_URI prints a non-empty URL

python -m alembic upgrade head runs without SyntaxError and reports the migration ID you just added

If anything still blocks, paste the new traceback and I’ll pinpoint the next fix.

You said:
I am SSHed into a remote enterpirse server and doing work in the trex devbox what they call it. I don't think I can upgrade python there? right?
ChatGPT said:
Thought for 1m 9s

Yep—on the Trex devbox you usually can’t upgrade the system Python. That’s why Alembic is importing your db/models.py (which uses from __future__ import annotations) under Python 3.6, and it blows up.

Good news: you don’t need to upgrade Python to run your migration. Your migration script is explicit (it calls op.create_table(...)) and does not require importing the ORM models. So we can run Alembic without importing db.models.

Quick fix (no Python upgrade)
1) Make Alembic stop importing the models

Edit db_versions/env.py (the Alembic “environment” file). At the top you currently have:

from alembic import context
import db.models            # <-- this causes the crash on py3.6
from db.context import Context
import os


Change it to make the model import optional (or simply remove it):

from alembic import context
from db.context import Context
import os

# Optional: only import models if explicitly requested (for autogenerate).
if os.getenv("ALEMBIC_IMPORT_MODELS", "0") == "1":
    import db.models  # noqa


Also make sure target_metadata is set without needing the import:

target_metadata = Context().db_base.metadata


(From your screenshots, you already set the DB URL via SQLALCHEMY_DATABASE_URI and use it in env.py—that’s perfect.)

2) Export your DB URL in the shell
export SQLALCHEMY_DATABASE_URI='mysql+pymysql://USER:PASSWORD@HOST:3306/DBNAME'


(Use the real creds/host/db.)

3) Activate your venv and run the migration
source .venv/bin/activate
python -m alembic upgrade head


Because db.models is no longer imported, Python 3.6 won’t see from __future__ import annotations, and Alembic will apply your migration normally (creating log_metadata_header and log_metadata_attr).

Why this is safe

Your migration file already contains the DDL (op.create_table(...)), so Alembic doesn’t need ORM metadata or autogenerate.

We’ve left the option to import models when you’re on a newer Python (set ALEMBIC_IMPORT_MODELS=1 to get autogenerate behavior in the future).

We didn’t alter any enterprise libraries; just a small tweak in Alembic’s env file to avoid importing models on py3.6.

Alternative (if you prefer flags instead of env var)

If you’d rather drive this with an Alembic “x” arg, replace the optional import with:

opts = context.get_x_argument(as_dictionary=True)
if opts.get("import_models") == "1":
    import db.models  # noqa


Then run:

python -m alembic upgrade head -x import_models=0


If anything else errors out after that (e.g., DB URL, driver, permissions), paste the new traceback and I’ll zero in on it.
