1) Get the commit hash from your local VS Code

In VS Code: Help → About

Copy the value labeled Commit (a long hex string).
Let’s call it: COMMIT_HASH

2) Download the server tarball on your laptop

Open PowerShell:

$version = "1.104.1"
$tarPath = "$env:USERPROFILE\Downloads\vscode-server-$version-linux-x64.tar.gz"
Invoke-WebRequest -Uri "https://update.code.visualstudio.com/$version/server-linux-x64/stable" -OutFile $tarPath

3) Copy it to TREX and place it where VS Code expects
# make the commit directory on TREX
ssh jenas7@10.224.82.10 "mkdir -p ~/.vscode-server/bin/COMMIT_HASH"

# copy the tarball up
scp "$tarPath" jenas7@10.224.82.10:~/.vscode-server/bin/COMMIT_HASH/vscode-server.tar.gz

4) Extract it on TREX
ssh jenas7@10.224.82.10 "cd ~/.vscode-server/bin/COMMIT_HASH && tar --strip-components 1 -xzf vscode-server.tar.gz && rm vscode-server.tar.gz"

5) Connect from VS Code

Green button (bottom-left) → Connect to Host… → jenas7@10.224.82.10

Select Linux
VS Code should now find the server in ~/.vscode-server/bin/COMMIT_HASH and connect (no prereq popup).

Replace COMMIT_HASH above with the exact one you copied from Help → About.
##################################################################################
Great progress — your screenshots show:

VS Code client 1.104.1

Commit 0f0d87fa9e96c856c5212fc86db137ac0d783365

You extracted the server into:
~/.vscode-server/bin/0f0d87fa9e96c856c5212fc86db137ac0d783365

That’s exactly right. Now do this to finish and connect.

1) Make sure the server folder is complete & readable

On TREX:

ls -la ~/.vscode-server/bin/0f0d87fa9e96c856c5212fc86db137ac0d783365
# you should see: bin/ extensions/ node/ product.json package.json LICENSE …

# just in case, ensure perms for your user
chmod -R u+rwX ~/.vscode-server

2) (Recommended on corp networks) Set env so the server knows your proxy

Create the optional env file VS Code reads on startup:

cat > ~/.vscode-server/server-env-setup <<'EOF'
export http_proxy="http://proxy.cat.com:80"
export https_proxy="$http_proxy"
export HTTP_PROXY="$http_proxy"
export HTTPS_PROXY="$http_proxy"
EOF

3) Quick self-test that the server binaries run

Still on TREX:

~/.vscode-server/bin/0f0d87fa9e96c856c5212fc86db137ac0d783365/bin/code-server --help | head -n 5


If you see usage/help text, the binaries link fine (glibc/libstdc++ are OK).

4) Reconnect from VS Code (no full app restart needed)

In VS Code on your laptop: bottom-left green corner → Close Remote Connection (if connected/error dialog is open).

Then green corner → Connect to Host… → jenas7@10.224.82.10

Choose Linux.

VS Code should detect the preinstalled server in the commit folder and connect (skips the prereq check).

If it still pops the “prerequisites” error

Try these small tweaks (in order):

Force a fresh handshake

rm -rf ~/.vscode-server/.tmp


Then disconnect/reconnect from VS Code again.

Show the login terminal & avoid local server (on your laptop VS Code):

File → Preferences → Settings → search “Remote SSH”

Set Remote.SSH: Show Login Terminal = On

Set Remote.SSH: Use Local Server = Off
Re-try connection (you’ll see more logs; if there’s a path/perm issue we’ll catch it).

Manually launch once to warm up caches (on TREX):

~/.vscode-server/bin/0f0d87fa9e96c856c5212fc86db137ac0d783365/bin/code-server \
  --telemetry-level off --compatibility=1 --host 127.0.0.1 --port 0


(Then Ctrl+C.) Now reconnect from VS Code.

If it still fails, paste the first 30 lines from the Remote-SSH “Output” log in VS Code (View → Output → dropdown: “Remote - SSH”). That will tell us exactly what it’s unhappy about (wrong path, perms, proxy, etc.), and I’ll pinpoint the next one-liner to fix it.

Option B — If you must use TREX and a proxy

If TREX needs a proxy, set it for the session and try again (don’t hide errors with -s):

# on TREX
export http_proxy="http://proxy.cat.com:80"
export https_proxy="$http_proxy"
export HTTP_PROXY="$http_proxy"
export HTTPS_PROXY="$http_proxy"

# test connectivity
curl -vI https://update.code.visualstudio.com/

# fetch commit and install
commit=$(curl -s https://update.code.visualstudio.com/1.104.1/server-linux-x64/stable/product.json | grep -oP '"commit":\s*"\K[^"]+')
mkdir -p ~/.vscode-server/bin/$commit
cd ~/.vscode-server/bin/$commit
curl -L "https://update.code.visualstudio.com/1.104.1/server-linux-x64/stable" -o vscode-server.tar.gz
tar --strip-components 1 -xzf vscode-server.tar.gz
rm vscode-server.tar.gz


Then reconnect from VS Code.
#########################################################
commit=$(curl -s https://update.code.visualstudio.com/1.74.3/server-linux-x64/stable/product.json | grep -oP '"commit":\s*"\K[^"]+')
mkdir -p ~/.vscode-server/bin/$commit
cd ~/.vscode-server/bin/$commit
curl -L "https://update.code.visualstudio.com/1.74.3/server-linux-x64/stable" -o vscode-server.tar.gz
tar --strip-components 1 -xzf vscode-server.tar.gz
rm vscode-server.tar.gz

########################################################################################################

Perfect — your screenshot shows your local VS Code version is:

1.104.2
commit: ea36acf5b7434a3225981655413d56653107692


That means when you SSH into TREX, VS Code Remote-SSH will try to install the server under:

~/.vscode-server/bin/ea36acf5b7434a3225981655413d56653107692

✅ Next steps for you

SSH into TREX:

ssh jenas7@10.224.82.10


Create the server folder for that commit:

mkdir -p ~/.vscode-server/bin/ea36acf5b7434a3225981655413d56653107692
cd ~/.vscode-server/bin/ea36acf5b7434a3225981655413d56653107692


Download and extract the server:

curl -L "https://update.code.visualstudio.com/1.104.2/server-linux-x64/stable" -o vscode-server.tar.gz
tar --strip-components 1 -xzf vscode-server.tar.gz
rm vscode-server.tar.gz


Verify files exist:

ls -l ~/.vscode-server/bin/ea36acf5b7434a3225981655413d56653107692


You should see bin/, node, package.json, etc.

##########################################################################################################################

Step 1 — Quick sanity check on TREX

Run these on TREX:

# list the two server folders
ls -1 ~/.vscode-server/bin

# test the *current* (ea35acf…) server’s node binary
~/.vscode-server/bin/ea35acf*/node -v


If you see a version like v18.x, great → go to Step 2.

If you see an error like “libc.so.6: version GLIBC_2.28 not found”, skip to Step 3 (Downgrade client).

Step 2 — Reconnect cleanly (if no GLIBC error)

In VS Code (local), bottom-left green box → Close Remote Connection.

Connect to Host… → jenas7@10.224.82.10 → choose Linux.
It should now reuse the ea35acf… server you just unpacked.

If it still shows the same prereq dialog, delete temp state and retry:

# on TREX
rm -rf ~/.vscode-server/.tmp


Reconnect again. If it still fails, move to Step 3.

Step 3 — (Most likely) Downgrade your local VS Code to a build that works with Ubuntu 18.04

The reliable fix on glibc-2.27 systems is to use VS Code 1.74.3 on your laptop, which pushes a compatible server to TREX.

A) Install VS Code 1.74.3 (Windows x64, User setup)

Download and run:
https://update.code.visualstudio.com/1.74.3/win32-x64-user/stable

After install, open VS Code and confirm:

Help → About
Version: 1.74.3


(The commit will be different; that’s fine.)

B) Clean the old server folders on TREX
ssh jenas7@10.224.82.10
mv ~/.vscode-server ~/.vscode-server.backup.$(date +%s)  # keep a backup just in case

C) Reconnect from the downgraded VS Code

VS Code → Remote-SSH: Connect to Host… → jenas7@10.224.82.10 → Linux
VS Code will push/download the 1.74.3 server which works with glibc 2.27, and the connection should succeed.

(If your network proxy blocks the auto-download, we can pre-seed it like you did before with:

commit=$(curl -s https://update.code.visualstudio.com/1.74.3/server-linux-x64/stable/product.json | grep -oP '"commit":\s*"\K[^"]+')
mkdir -p ~/.vscode-server/bin/$commit
cd ~/.vscode-server/bin/$commit
curl -L "https://update.code.visualstudio.com/1.74.3/server-linux-x64/stable" -o vscode-server.tar.gz
tar --strip-components 1 -xzf vscode-server.tar.gz
rm vscode-server.tar.gz


…and then reconnect.)

Step 4 — Open your project

Once connected (you’ll see SSH: 10.224.82.10 in the status bar):

File → Open Folder… → /home/jenas7/plat_aiesdp_elt_pipeline → OK.

TL;DR

Use the ea35acf… folder only if its node runs (no GLIBC error).

If it does complain about GLIBC_2.28 (likely), downgrade your local VS Code to 1.74.3, clear ~/.vscode-server on TREX, and reconnect. That’s the clean, proven path on Ubuntu 18.04.

Back in your local VS Code, disconnect from SSH and reconnect. It should now detect the server.

###################################

18.04 which only ships GLIBC 2.27.

So, the problem isn’t your steps — it’s that the VS Code server build doesn’t match the GLIBC version on TREX.

✅ You have two options forward:

Option A (recommended, safer)

Install an older VS Code server version that is compatible with GLIBC 2.27 (Ubuntu 18.04).

Example: VS Code 1.74.3 server works fine with GLIBC 2.27.

Commands:

commit=$(curl -s https://update.code.visualstudio.com/1.74.3/server-linux-x64/stable/product.json | grep -oP '"commit":\s*"\K[^"]+')
mkdir -p ~/.vscode-server/bin/$commit
cd ~/.vscode-server/bin/$commit
curl -L "https://update.code.visualstudio.com/1.74.3/server-linux-x64/stable" -o vscode-server.tar.gz
tar --strip-components 1 -xzf vscode-server.tar.gz
rm vscode-server.tar.gz


Then reconnect from your local VS Code.

Option B (heavier, not recommended unless required)

Upgrade GLIBC on TREX from 2.27 → 2.28+.

This is risky because GLIBC is core to the OS.

Needs root access, compilation, and testing (can break other apps).

Typically, IT admins do this, not end users.

👉 Given your environment (TREX is a shared enterprise box), Option A is the right move: install a VS Code server version compatible with GLIBC 2.27.
#########################################################################################################################

So if your commit is already known (like e123), you don’t need this line. Instead you just do:

commit=e123


and continue with:

mkdir -p ~/.vscode-server/bin/$commit
cd ~/.vscode-server/bin/$commit
curl -L "https://update.code.visualstudio.com/1.74.3/server-linux-x64/stable" -o vscode-server.tar.gz
tar --strip-components 1 -xzf vscode-server.tar.gz
rm vscode-server.tar.gz

Do you want me to give you the exact uninstall-cleanup steps for the wrong commit (e3a5acf...) and then install the 1.74.3 version fresh?
#################################################################################################################################
Yes — c3511e6c69bb39013c4a4b7b9566ec1ca73fc4d5 is a solid choice.
It’s the commit for VS Code 1.74.3 (Dec 2022), which runs fine on Ubuntu 18.04 / glibc 2.27 (unlike newer builds that require glibc ≥2.28).

Install that server on TREX

If you’re behind a proxy, set it first:

export http_proxy="http://proxy.cat.com:80"
export https_proxy="$http_proxy"
export HTTP_PROXY="$http_proxy"
export HTTPS_PROXY="$http_proxy"


Then install:

commit=c3511e6c69bb39013c4a4b7b9566ec1ca73fc4d5
mkdir -p ~/.vscode-server/bin/$commit
cd ~/.vscode-server/bin/$commit
curl -L "https://update.code.visualstudio.com/commit:$commit/server-linux-x64/stable" -o vscode-server.tar.gz
tar --strip-components 1 -xzf vscode-server.tar.gz
rm vscode-server.tar.gz


Quick sanity checks:

~/.vscode-server/bin/$commit/bin/node -v
~/.vscode-server/bin/$commit/bin/code-server --help | head -n 3


(Both should run without the GLIBC_2.28 not found error.)

Important: match your local VS Code

Your local VS Code must also be 1.74.3 (same commit), otherwise it will try to push a newer server that needs glibc 2.28 and you’ll hit the same error.
Use a 1.74.3 installer or a portable build just for TREX, then reconnect with Remote-SSH.

If you want, I can drop the exact download link/steps for installing VS Code 1.74.3 on your local VM too.

